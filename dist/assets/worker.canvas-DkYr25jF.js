(function(){"use strict";console.log("running converter.worker.canvas");const w=new OffscreenCanvas(100,100),B=w.getContext("bitmaprenderer");let l;const v=new Map;self.onmessage=async o=>{const{ports:e}=o;if(e[0]){l=e[0],l.onmessage=k;return}const n=o.data;for(const t of n)await I(t);self.postMessage({action:"list-end"})};async function I(o){const{index:e,file:n,fileId:t,type:f,quality:d,demandThumbnail:u,demandImage:p,webkitRelativePath:m}=o,a=m||n.webkitRelativePath||n.name,z=n.size;let s;s={action:"file-start",path:a,fileId:t,index:e},self.postMessage(s);let r;try{r=await createImageBitmap(n)}catch{console.error("error occurred on canvas worker",t,a),s={action:"file-error",path:a,fileId:t,index:e},self.postMessage(s);return}const{width:g,height:h}=r;let M=null;if(u){const c=g>h?{resizeWidth:110}:{resizeHeight:80};M=await createImageBitmap(r,{...c,resizeQuality:"low"})}B.transferFromImageBitmap(r),s={action:"file-load",fileId:t,path:a,index:e,thumbnail:M,width:g,height:h},self.postMessage(s);const i=await w.convertToBlob({type:f,quality:d}),b=i.size;let y;if(p)y=i;else{const c=await(i==null?void 0:i.arrayBuffer())||null;l.postMessage({data:c,path:a,fileId:t},[c])}s={action:"file-converted",path:a,fileId:t,index:e,outputsize:b,inputsize:z,image:y,width:g,height:h},self.postMessage(s),v.set(t,{outputsize:b,inputsize:z,path:a,index:e})}const k=o=>{const{fileId:e,renamed:n,outputPath:t,canceled:f}=o.data,{inputsize:d,outputsize:u,path:p,index:m}=v.get(e),a={action:f?"file-canceled":"file-completed",fileId:e,path:p,index:m,inputsize:d,outputsize:u};self.postMessage(a)}})();
